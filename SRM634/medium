#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;
/*****************************************/
#define N 20009
#define M 2000009
#define inf 2000000000
#define INT int
struct E {
	int t, next;
	INT flow, cap;
} edge[M];
int node[N], eid;
vector<int> e[N];
int rr[N];
int que[N];
void init() {
	eid = 0;
	memset(rr, -1, sizeof(rr));
	memset(node, -1, sizeof(node));
}
void addedge(int a, int b, INT c) {
	edge[eid].t = b;
	edge[eid].cap = c;
	edge[eid].flow = 0;
	edge[eid].next = node[a];
	node[a] = eid++;

	edge[eid].t = a;
	edge[eid].cap = 0; //0单向，c双向
	edge[eid].flow = 0;
	edge[eid].next = node[b];
	node[b] = eid++;
}
int bfs(int s, int t, int n) {
	memset(rr, -1, sizeof(rr));
	int i;
	for (i = 0; i < n; ++i)
		e[i].clear();
	int u, v;
	int front = 0, rear = 1;
	rr[s] = 0;
	que[0] = s;
	while (rear > front) {
		u = que[front++];
		for (i = node[u]; i != -1; i = edge[i].next) {
			v = edge[i].t;
			if (rr[v] == -1 && edge[i].cap) {
				que[rear++] = v;
				rr[v] = rr[u] + 1;
			}
			if (rr[v] == rr[u] + 1)
				e[u].push_back(i);
		}
	}
	return (rr[t] != -1);
}
INT dinic(int s, int t, int n) {
	int st[N];
	INT maxflow = 0;
	int aux[N];
	int top, cur;
	int p, i, k;
	while (bfs(s, t, n)) {
		top = 0;
		st[top] = s;
		cur = s;
		while (1) {
			if (cur == t) {
				INT minc = inf;
				for (i = 0; i < top; ++i) {
					p = aux[i + 1];
					if (minc > edge[p].cap)
						minc = edge[p].cap, k = i;
				}
				for (i = 0; i < top; ++i) {
					p = aux[i + 1];
					edge[p].cap -= minc;
					edge[p ^ 1].cap += minc;
				}
				maxflow += minc;
				cur = st[top = k];
			}
			int len = e[cur].size();
			while (len) {
				p = e[cur][len - 1];
				if (edge[p].cap && rr[edge[p].t] == rr[cur] + 1)
					break;
				else {
					len--;
					e[cur].pop_back();
				}
			}
			if (len) {
				cur = st[++top] = edge[p].t;
				aux[top] = p;
			} else {
				if (top == 0)
					break;
				rr[cur] = -1;
				cur = st[--top];
			}
		}
	}
	return maxflow;
}
/*************************************************/
struct TPoint {
	int x, y;
} a, b;
long long cross(const TPoint & a, const TPoint & b, const TPoint & c) {
	return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}

bool seg_inter(TPoint & a, TPoint & b, TPoint & c, TPoint & d) {
	return
	//排斥试验
	max(a.x, b.x) >= min(c.x, d.x) && max(c.x, d.x) >= min(a.x, b.x) && max(
			a.y, b.y) >= min(c.y, d.y) && max(c.y, d.y) >= min(a.y, b.y) &&
	//跨立试验
			cross(a, b, c) * cross(a, b, d) <= 0 && cross(c, d, a) * cross(c,
			d, b) <= 0;
}

/************************************************/
class SegmentDrawing {
public:
	int maxScore(vector<int> , vector<int> , vector<int> , vector<int> );
};
int in[405][405];

vector<pair<TPoint, TPoint> > v;
vector<pair<int, int> > s;
int SegmentDrawing::maxScore(vector<int> x, vector<int> y,
		vector<int> redScore, vector<int> blueScore) {
	int i, j, k;
	int nn;
	nn = x.size();

	v.clear();
	s.clear();
	memset(in, 0, sizeof(in));
	for (i = 0; i < nn; ++i) {
		for (j = i + 1; j < nn; ++j) {
			a.x = x[i];
			a.y = y[i];
			b.x = x[j];
			b.y = y[j];
			v.push_back(make_pair(a, b));
			s.push_back(make_pair(redScore[i * nn + j], blueScore[i * nn + j]));
		}
	}
	int n = v.size();
	for (i = 0; i < n; ++i) {
		for (j = 0; j < n; ++j) {
			if (i == j)
				in[i][j] = 1;
			else {
				if (seg_inter(v[i].first, v[i].second, v[j].first, v[j].second))
					in[i][j] = 1;
			}
		}
	}
	init();
	int ans = 0;
	int S = 2 * n;
	int T = 2 * n + 1;
	for (i = 0; i < n; ++i) {
		ans += s[i].first;
		ans += s[i].second;
		addedge(S, i, s[i].first);
		addedge(i + n, T, s[i].second);
	}
	for (i = 0; i < n; ++i) {
		for (j = 0; j < n; ++j) {
			if (in[i][j])
				addedge(i, j + n, inf);
		}
	}
	return ans - dinic(S, T, T + 1);
}
