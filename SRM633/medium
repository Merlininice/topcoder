#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define N 20009
#define M 2000009
#define inf 2000000000
#define INT int
struct E {
	int t, next;INT flow, cap;
} edge[M];
int node[N], eid;
vector<int> e[N];
int rr[N];
int que[N];
void init() {
	eid = 0;
	memset(rr, -1, sizeof(rr));
	memset(node, -1, sizeof(node));
}
void addedge(int a, int b, INT c) {
	edge[eid].t = b;
	edge[eid].cap = c;
	edge[eid].flow = 0;
	edge[eid].next = node[a];
	node[a] = eid++;

	edge[eid].t = a;
	edge[eid].cap = 0; //0单向，c双向
	edge[eid].flow = 0;
	edge[eid].next = node[b];
	node[b] = eid++;
}
int bfs(int s, int t, int n) {
	memset(rr, -1, sizeof(rr));
	int i;
	for (i = 0; i < n; ++i)
		e[i].clear();
	int u, v;
	int front = 0, rear = 1;
	rr[s] = 0;
	que[0] = s;
	while (rear > front) {
		u = que[front++];
		for (i = node[u]; i != -1; i = edge[i].next) {
			v = edge[i].t;
			if (rr[v] == -1 && edge[i].cap) {
				que[rear++] = v;
				rr[v] = rr[u] + 1;
			}
			if (rr[v] == rr[u] + 1)
				e[u].push_back(i);
		}
	}
	return (rr[t] != -1);
}
INT dinic(int s, int t, int n) {
	int st[N];
	INT maxflow = 0;
	int aux[N];
	int top, cur;
	int p, i, k;
	while (bfs(s, t, n)) {
		top = 0;
		st[top] = s;
		cur = s;
		while (1) {
			if (cur == t) {
				INT minc = inf;
				for (i = 0; i < top; ++i) {
					p = aux[i + 1];
					if (minc > edge[p].cap)
						minc = edge[p].cap, k = i;
				}
				for (i = 0; i < top; ++i) {
					p = aux[i + 1];
					edge[p].cap -= minc;
					edge[p ^ 1].cap += minc;
				}
				maxflow += minc;
				cur = st[top = k];
			}
			int len = e[cur].size();
			while (len) {
				p = e[cur][len - 1];
				if (edge[p].cap && rr[edge[p].t] == rr[cur] + 1)
					break;
				else {
					len--;
					e[cur].pop_back();
				}
			}
			if (len) {
				cur = st[++top] = edge[p].t;
				aux[top] = p;
			} else {
				if (top == 0)
					break;
				rr[cur] = -1;
				cur = st[--top];
			}
		}
	}
	return maxflow;
}

class DoubleTree {
public:
	int maximalScore(vector<int>, vector<int>, vector<int>, vector<int>,
			vector<int>);
};

vector<int> nt1[55];
vector<int> nt2[55];
int fa1[105];
int fa2[105];

void dfs1(int i, int fa) {
	int j;
	fa1[i] = fa;
	for (j = 0; j < nt1[i].size(); ++j) {
		if (fa == nt1[i][j])
			continue;
		dfs1(nt1[i][j], i);
	}
}
void dfs2(int i, int fa) {
	int j;
	fa2[i] = fa;
	for (j = 0; j < nt2[i].size(); ++j) {
		if (fa == nt2[i][j])
			continue;
		dfs2(nt2[i][j], i);
	}
}

int DoubleTree::maximalScore(vector<int> a, vector<int> b, vector<int> c,
		vector<int> d, vector<int> score) {
	int i, j, n;
	n = a.size() + 1;
	for (i = 0; i < n; ++i) {
		nt1[i].clear();
		nt2[i].clear();
	}
	for (i = 0; i < n - 1; ++i) {
		nt1[a[i]].push_back(b[i]);
		nt1[b[i]].push_back(a[i]);
		nt2[c[i]].push_back(d[i]);
		nt2[d[i]].push_back(c[i]);
	}
	int ans = 0;
	for (i = 0; i < n; ++i) {
		dfs1(i, -1);
		dfs2(i, -1);
		init();
		int s = 2 * n;
		int t = 2 * n + 1;
		int p = 0;
		for (j = 0; j < n; ++j) {
			addedge(j, j + n, inf);
			if (score[j] <= 0) {
				addedge(s, j, 0);
				addedge(j + n, t, -score[j]);
			} else {
				p += score[j];
				addedge(s, j, score[j]);
				addedge(j + n, t, 0);
			}
			if (fa1[j] != -1)
				addedge(j, fa1[j], inf);
			if (fa2[j] != -1)
				addedge(j, fa2[j], inf);
		}
		p -= dinic(s, t, t + 1);
		ans = max(ans, p);
	}
	return ans;
}
